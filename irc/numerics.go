package irc

import (
	"bufio"
	"fmt"
	"strings"
)

// NumericCommand represents a numbered server reply
type NumericCommand int

//nolint: golint
//noinspection GoSnakeCaseUsage
const (
	RPL_WELCOME  NumericCommand = 001
	RPL_YOURHOST NumericCommand = 002
	RPL_CREATED  NumericCommand = 003
	RPL_ISUPPORT NumericCommand = 005

	RPL_TOPIC         NumericCommand = 332
	RPL_TOPIC_WHOTIME NumericCommand = 333

	RPL_WHOREPLY   NumericCommand = 352
	RPL_ENDOFWHO   NumericCommand = 315
	RPL_NAMREPLY   NumericCommand = 353
	RPL_ENDOFNAMES NumericCommand = 366
	RPL_MOTD       NumericCommand = 372
	RPL_MOTDSTART  NumericCommand = 375
	RPL_ENDOFMOTD  NumericCommand = 376

	ERR_UNKNOWNCOMMAND NumericCommand = 421
	ERR_NEEDMOREPARAMS NumericCommand = 461
)

// A NumericReply is a numbered reply generated by the server
type NumericReply struct {
	Code   NumericCommand
	Params []string

	ServerName string
	Target     string
}

// ToMessage turns a NumericReply into a message
func (n *NumericReply) ToMessage() *Message {
	params := []string{fmt.Sprintf("%03d", n.Code), fmt.Sprintf("%v", n.Target)}
	params = append(params, n.Params...)

	return &Message{
		Prefix: n.ServerName,
		Cmd:    NumericReplyCmd,
		Params: params,
	}
}

func (n *NumericReply) String() string {
	return n.ToMessage().String()
}

func (n *NumericReply) Error() string {
	return fmt.Sprintf("%03d: \"%v\"", n.Code, strings.Join(n.Params, "\",\""))
}

// MOTDAsNumerics formats a MOTD into a series of numeric replies
func MOTDAsNumerics(motd string) []*NumericReply {
	var replies []*NumericReply

	scanner := bufio.NewScanner(strings.NewReader(motd))
	if scanner.Scan() {
		replies = append(replies, &NumericReply{
			Code:   RPL_MOTDSTART,
			Params: []string{scanner.Text()},
		})
	}
	for scanner.Scan() {
		replies = append(replies, &NumericReply{
			Code:   RPL_MOTD,
			Params: []string{scanner.Text()},
		})
	}
	replies = append(replies, &NumericReply{
		Code:   RPL_ENDOFMOTD,
		Params: []string{"End of /MOTD command."},
	})
	return replies
}

// WholistAsNumerics formats a list of Users into a series of WHO replies
func WholistAsNumerics(users []User, channelName, serverName string) []*NumericReply {
	var replies []*NumericReply

	for _, user := range users {
		awayChar := "H"
		if user.Away {
			awayChar = "G"
		}

		replies = append(replies, &NumericReply{
			Code: RPL_WHOREPLY,
			Params: []string{
				channelName,
				user.Ident,
				user.Host,
				serverName,
				user.Nick,
				awayChar,
				fmt.Sprintf("0 %s", user.RealName),
			},
		})
	}

	replies = append(replies, &NumericReply{
		Code:   RPL_ENDOFWHO,
		Params: []string{channelName, "End of /WHO list"},
	})
	return replies
}

// NamelistAsNumerics formats a list of Users into a series of NAMES replies
func NamelistAsNumerics(users []User, channelName string) []*NumericReply {
	var replies []*NumericReply
	var namesListBuilder strings.Builder

	for _, user := range users {
		if namesListBuilder.Len() > 400 {
			// So the ENTIRE IRC message can't be more than 512 bytes, but we're going to
			// conservatively assume that the part that isn't the NAMES list isn't more than
			// 112 bytes, which seems...safe enough.
			replies = append(replies, &NumericReply{
				Code:   RPL_NAMREPLY,
				Params: []string{"=", channelName, strings.TrimSpace(namesListBuilder.String())},
			})
			namesListBuilder.Reset()
		}

		namesListBuilder.WriteString(user.Nick)
		namesListBuilder.WriteString(" ")
	}

	if namesListBuilder.Len() > 0 {
		replies = append(replies, &NumericReply{
			Code:   RPL_NAMREPLY,
			Params: []string{"=", channelName, strings.TrimSpace(namesListBuilder.String())},
		})
	}

	replies = append(replies, &NumericReply{
		Code:   RPL_ENDOFNAMES,
		Params: []string{channelName, "End of /NAMES list"},
	})
	return replies
}

// ErrUnknownCommand is the numeric reply to an unknown or invalid command
func ErrUnknownCommand(command string) *NumericReply {
	return &NumericReply{
		Code:   ERR_UNKNOWNCOMMAND,
		Params: []string{command, "Unknown command"},
	}
}

// ErrNeedMoreParams is the numeric reply to a command that requires more params
func ErrNeedMoreParams(command string) *NumericReply {
	return &NumericReply{
		Code:   ERR_NEEDMOREPARAMS,
		Params: []string{command, "Not enough parameters"},
	}
}
